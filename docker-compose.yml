version: '3.8'

# Define networks
networks:
  hft-internal:
    driver: bridge
  hft-external:
    driver: bridge

# Define volumes
volumes:
  config-volume:
  keys-volume:
  logs-volume:
  metrics-volume:
  db-data:
  redis-data:
  prometheus-data:
  grafana-data:

services:
  # Core HFT Bot service
  core-bot:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: solana-hft-bot:latest
    container_name: solana-hft-core
    restart: always
    # Use host network for lowest latency
    network_mode: host
    # CPU pinning for performance
    cpuset: "0-3"
    # Allocate huge pages
    shm_size: 2gb
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G
    # Enable SYS_NICE for process prioritization
    cap_add:
      - SYS_NICE
    # Disable Docker logging for high-throughput components
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"
    # Configure ulimits for network performance
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
      memlock:
        soft: -1
        hard: -1
    volumes:
      - config-volume:/app/config
      - keys-volume:/app/keys
      - logs-volume:/app/logs
      - metrics-volume:/app/metrics
    environment:
      - CONFIG_PATH=/app/config/config.json
      - LOGGING_CONFIG_PATH=/app/config/logging-config.json
      - METRICS_CONFIG_PATH=/app/config/metrics-config.json
      - RUST_BACKTRACE=1
      - RUST_LOG=info
      - DATABASE_URL=postgres://postgres:postgres@database:5432/hft
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Database service
  database:
    image: postgres:15-alpine
    container_name: solana-hft-db
    restart: always
    networks:
      - hft-internal
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=hft
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G

  # Redis for caching and pub/sub
  redis:
    image: redis:7-alpine
    container_name: solana-hft-redis
    restart: always
    networks:
      - hft-internal
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G

  # Dashboard UI
  dashboard-ui:
    build:
      context: .
      dockerfile: Dockerfile.ui
    image: solana-hft-dashboard:latest
    container_name: solana-hft-dashboard
    restart: always
    networks:
      - hft-internal
      - hft-external
    ports:
      - "3000:3000"
    environment:
      - API_URL=http://core-bot:8080
      - NODE_ENV=production
    depends_on:
      core-bot:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: solana-hft-prometheus
    restart: always
    networks:
      - hft-internal
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    depends_on:
      - core-bot
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: solana-hft-grafana
    restart: always
    networks:
      - hft-internal
      - hft-external
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G

  # Watchtower for automated updates
  watchtower:
    image: containrrr/watchtower
    container_name: solana-hft-watchtower
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --interval 86400 --cleanup
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_INCLUDE_STOPPED=false
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 256M